import sys
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from datetime import datetime
from pyspark.sql import SparkSession

# Initialize Spark session with Iceberg configs
spark = SparkSession.builder \
    .config("spark.sql.catalog.glue_catalog", "org.apache.iceberg.spark.SparkCatalog") \
    .config("spark.sql.catalog.glue_catalog.warehouse", "s3://your-bucket/path/") \
    .config("spark.sql.catalog.glue_catalog.catalog-impl", "org.apache.iceberg.aws.glue.GlueCatalog") \
    .config("spark.sql.catalog.glue_catalog.io-impl", "org.apache.iceberg.aws.s3.S3FileIO") \
    .enableHiveSupport() \
    .getOrCreate()

glueContext = GlueContext(SparkContext.getOrCreate())

# Config
catalog_name = "glue_catalog"
database_name = "your_db"
table_name = "your_table"
partition_col = "your_partition_column"  # e.g., "event_date"
full_table_name = f"{catalog_name}.{database_name}.{table_name}"

try:
    # Step 1: Get distinct partitions
    df = spark.read.format("iceberg").load(full_table_name)
    partitions = df.select(partition_col).distinct().orderBy(partition_col, ascending=False)
    partition_values = [row[partition_col] for row in partitions.collect()]

    # Step 2: Skip last 2 partitions
    if len(partition_values) <= 2:
        raise Exception("Not enough partitions to optimize after skipping the last two.")

    partitions_to_optimize = partition_values[2:]
    print(f"Starting optimization on {len(partitions_to_optimize)} partitions...")

    # Step 3: Optimize each partition
    for value in partitions_to_optimize:
        print(f"Optimizing partition: {partition_col} = '{value}'")
        try:
            spark.sql(f"""
                CALL {catalog_name}.system.optimize('{database_name}.{table_name}', 
                    '{partition_col}={value}')
            """)
        except Exception as e:
            raise Exception(f"Optimization failed for partition {value}: {str(e)}")

    print("✅ Optimization completed successfully.")

except Exception as e:
    print(f"❌ Job failed: {str(e)}")
    sys.exit(1)
